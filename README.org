#+TITLE: WorkflowFM Reasoner
#+AUTHOR: Petros Papapanagiotou
#+OPTIONS: toc:nil

[[../../releases/latest][https://img.shields.io/badge/version-0.6.1-brightgreen.svg]]
[[https://opensource.org/licenses/Apache-2.0][https://img.shields.io/badge/license-Apache%202.0-yellowgreen.svg]]

A logic-based library for correct-by-construction process modelling and composition. 

| [[https://aiml.inf.ed.ac.uk/][Artificial Intelligence Modelling Lab]] |
| [[https://web.inf.ed.ac.uk/aiai][Artificial Intelligence and its Applications Institute]] |
| [[https://www.ed.ac.uk/informatics/][School of Informatics, University of Edinburgh]] |

This is part of the [[https://github.com/workflowfm/][WorkflowFM]] framework for correct-by-construction process and resource workflows.

[[http://docs.workflowfm.com/workflowfm-reasoner][More info and documentation can be found in the main webpage.]]

* About

This is a logic-based library for the interactive theorem prover [[https://github.com/jrh13/hol-light][HOL Light]] that allows for rigorous, formally verified process specification and composition. The resulting workflows are *correct-by-construction* with the following verified properties:

- *Systematic resource accounting*: No resources appear out of nowhere or disappear into thin air.
- *Deadlock and livelock freedom*: The constructed workflows can be executed without fear for deadlocks or livelocks.
- *Type checked composition*: The correctness of the types of all connected resources is ensured via the logical proof.
- *Fully asynchronous and concurrent execution*: During workflow execution, each component process can be executed fully asynchronously (see the [[http://docs.workflowfm.com/pew][PEW engine]] for more details) and concurrently, without introducing any conflicts, race conditions, or deadlocks.

The constructed workflows can be exported either for visualization using the [[http://frapu.de/bpm/piviztool.html][PiVizTool]] or as Scala code for execution using the [[http://docs.workflowfm.com/pew][PEW engine]].

The [[#references][references]] provide more in depth details of the theory behind the WorkflowFM Reasoner.

** Key Features
   - Process specification using Classical Linear Logic (CLL).
   - Process composition using formally verified forward inference.
   - Interactive theorem proving in CLL.
   - Intuitive high-level actions for sequential, conditional, and parallel composition.
   - Proof translation to [[https://en.wikipedia.org/wiki/%CE%A0-calculus][\pi-calculus]].
   - Modular encoding allows different CLL translations (e.g. to session types), automatically reconstructing the entire process reasoning framework.
   - Tracking of [[http://docs.workflowfm.com/workflowfm-reasoner/docs/provenance/][provenance metadata]] during proof to guide visualization.
   - Export \pi-calculus to [[http://frapu.de/bpm/piviztool.html][PiVizTool]] format.
   - Export Scala code to execute workflows using the [[http://docs.workflowfm.com/pew][PEW engine]].
   - Modular API allows extensions with new composition actions, export options and commands.

** Modes
   The reasoner can run in 2 modes:
   - *Console*: This mode is intended for standard use within HOL Light, i.e. at the OCaml toplevel. It provides a minimal console interface for process modelling and composition.
   - *JSON*: This mode is intended for use within a server environment, to allow interaction with web applications (including UIs). It expects input and produces output encoded in [[https://en.wikipedia.org/wiki/JSON][JSON]] format.

* Quick Install

 Clone the following HOL Light fork:
 https://github.com/workflowfm/hol-light

 #+BEGIN_SRC sh :eval no
 git clone https://github.com/workflowfm/hol-light.git
 #+END_SRC

 Then make sure all the submodules are initialised and updated:
 #+BEGIN_SRC sh :eval no
 git submodule update --init --recursive
 #+END_SRC

Install HOL Light following its [[https://github.com/jrh13/hol-light/blob/master/READM][standard installation instructions]].

Once you have HOL Light up and running, you can load the reasoner in *console mode* using the following command:
#+BEGIN_SRC ocaml :eval no
loads (!hol_dir ^ "/workflowfm/make.console.ml");;
#+END_SRC 

If you need to use the *JSON mode*, you can use this command instead:
#+BEGIN_SRC ocaml :eval no
loads (!hol_dir ^ "/workflowfm/make.ml");;
#+END_SRC 

More detailed installation instructions are available at [[http://docs.workflowfm.com/workflowfm-reasoner/docs/install/][this link]].

* Authors
:PROPERTIES:
:CUSTOM_ID: authors
:END:

** Maintainer

   [[https://github.com/PetrosPapapa][Petros Papapanagiotou]] - pe.p@ed.ac.uk - [[https://twitter.com/petrospapapa][@PetrosPapapa]]

** Contributors

   A big thank you to the following contributors in order of appearance:

   - [[https://homepages.inf.ed.ac.uk/jdf/][Jacques Fleuriot]]


* References
:PROPERTIES:
:CUSTOM_ID: references
:END:

Please cite the following publication in reference to this project:
- P. Papapanagiotou, J. Fleuriot. [[https://link.springer.com/chapter/10.1007/978-3-319-63046-5%5F22][WorkflowFM: A Logic-Based Framework for Formal Process Specification and Composition]]. CADE, 2017.

Sample of other relevant references:
- P. Papapanagiotou, J. Fleuriot. [[https://ieeexplore.ieee.org/document/6061099][Formal Verification of Web Services Composition Using Linear Logic and the pi-calculus]]. ECOWS, 2011. 
- P. Papapanagiotou. [[https://era.ed.ac.uk/handle/1842/17863][A formal verification approach to process modelling and composition]]. PhD Thesis, 2014.
- P. Papapanagiotou, J. Fleuriot. [[https://link.springer.com/chapter/10.1007/978-3-030-13838-7%5F5][A Pragmatic, Scalable Approach to Correct-by-construction Process Composition Using Classical Linear Logic Inference]]. LOPSTR, 2019.


* License

Distributed under the Apache 2.0 license. See [[./LICENSE]] for more information.

Copyright \copy 2009-2021 [[https://www.ed.ac.uk/][The University of Edinburgh]] and [[#authors][contributors]]

