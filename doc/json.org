#+TITLE: WorkflowFM Reasoner JSON API
#+AUTHOR: Petros Papapanagiotou
#+EMAIL: petrospapapan@gmail.com
#+OPTIONS: toc:2
#+EXCLUDE_TAGS: noexport


* Main Types

** <<linprop>>Linear Propositions ~linprop~
*** Description
Linear terms are either:
1. atoms
2. subterms connected by tensor or plus 
3. negations of terms

*** Structure
- ~type~: ~string~ = ~"var" | "neg" | "times" | "plus"~
- ~name~: ~string~ = the name of the atom if ~type = "var"~, otherwise ignored
- ~args~: ~array~ of [[linprop][~linprop~]] = the list of arguments if ~type~ is ~neg~, ~times~ or ~plus~, otherwise ignored. Binary operators ~times~ and ~plus~ can have more than 2 arguments, in which case they are applied in a right associative way

** <<linterm>>Annotated terms ~linterm~
*** Description
Annotated terms are linear propositional terms annotated with a channel.

*** Structure
- ~cll~: [[linprop][~linprop~]]
- ~channel~: ~string~

** <<action>>Composition actions ~action~
*** Description
Composition actions describe a binary combination of 2 labelled processes. 

*** Structure
- ~act~: ~string~ = the type of composition, currently ~"JOIN" | "TENSOR" | "WITH"~ for sequential, parallel, and conditional composition respectively
- ~larg~: ~string~ = the name of the first (or "left") component process
- ~lsel~: ~string~ = a string describing some relevant part of the left process component. This is different depending on the action type.
- ~rarg~: ~string~ = the name of the second (or "right") component process
- ~rsel~: ~string~ = a string describing some relevant part of the right process component. This is different depending on the action type.
- ~res~: ~string~ = the desired label for the resulting composition

[TODO] Selections are expected as follows:
- ~TENSOR~:
- ~WITH~: 
- ~JOIN~:

** <<prov>>Provenance ~prov~
*** Description
Provenance trees are used to determine the origin of each linear proposition in an input or output term. 

For example, consider 2 processes:
- ~P~ with input ~X~ and output ~A ** B~
- ~Q~ with inputs ~B~ and ~Y~ and output ~C~

These can be joined through ~B~. The resulting composition will have inputs ~X~ and ~Y~ and output ~A ** C~. In this the following hold:
- ~X~ has an input provenance of ~P~
- ~Y~ has an input provenance of ~Q~
- In the output, ~A~ comes from ~P~ and ~C~ comes from ~Q~ so we construct the JSON object ~"P ** Q"~

The structure of the provenace tree matches the syntax tree of the corresponding term. For this reason with copy the structure of ~linprop~ but use the ~name~ to record the provenance label instead of the atom name.

Subtrees where all propositions have the same provenance can be replaced by an atomic/leaf provenance node with the single label. This is the only exception of the provenance tree not matching the syntax tree.



*** Structure
+ ~type~: ~string~ = ~"source" | "times" | "plus"~
+ ~name~: ~string~ = the provenance label if ~type = "source"~, otherwise ignored
+ ~args~: ~array~ of [[prov][~prov~]] = the list of arguments if ~type~ is  ~times~ or ~plus~, otherwise ignored. Binary operators ~times~ and ~plus~ can have more than 2 arguments, in which case they are applied in a right associative way

[TODO: clarify provenance labels]

** <<prov_entry>>Provenance entries ~prov_entry~ and ~iprov_entry~
*** Description
Provenance info is kept in the state. Provenance entries associate a provenance tree to the output (~prov_entry~) or input (~iprov_entry~) it corresponds to. Output provenance is associated with a process label whose output it describes. Input provenance is associated with an available input term.

[TODO: clarify]

**In the future, provenance info will be kept directly in the process instead of the state.*- This will make thing a bit more intuitive.

*** Structure
~prov_entry~:
- ~name~: ~string~ = the name/label of the process whose output we are describing
- ~prov~: [[prov][~prov~]] = the corresponding provenance tree

~iprov_entry~:
- ~term~: [[linprop][~linprop~]] = the (non-negated) linear term of the input we are describing
- ~prov~: [[prov][~prov~]] = the corresponding provenance tree

** <<actionstate>>Action state ~actionstate~
*** Description
The action state is used to convey state info to the prover and retrieve proof metadata afterwards.

*** Structure
- ~label~: ~string~ = a unique label identifying the composite process under contruction
- ~ctr~: ~int~ = a non-negative counter used to keep variables fresh. Expected to be initialized to ~0~.
- ~buffered~: ~array~ of [[linprop][~linprop~]] = the types of buffers that were constructed during proof. This used to be the way to determine buffered edges in the frontend, but is now obsolete thanks to the provenance trees.
- ~joined~: ~array~ of [[linterm][~linterm~]] = the inputs that were used up/connected during a ~JOIN~ action.
- ~iprov~: ~array~ of [[prov_entry][~iprov_entry~]] = input povenance entries
- ~prov~: ~array~ of [[prov_entry][~prov_entry~]] = output provenance entries

** <<agent>>Agent ~agent~ 

An agent refers to a pi-calculus agent corresponding to a process specification. Currently this is just a string, but we have plans to adopt a more structured representation in the near future.

** <<Process>>Process ~process~
*** Description
The complete specification of a process. 

*** Structure
- ~name~: ~string~ = a name/label for the process
- ~inputs~: ~array~ of [[linterm][~linterm~]] 
- ~output~: [[linterm][~linterm~]]
- ~proc~: [[agent][~agent~]] = the pi-calculus specification
- ~actions~: ~array~ of [[action][~action~]] = a list of composition actions that construct this process. Empty if the process is atomic.
- ~copier~: ~bool~ = true if the prover determines this to be a copy node
- ~intermediate~: ~bool~ = true if this is an intermediate composition step (as opposed to an atomic process or completed composition)

* Commands
All commands include a ~command~ field of type ~string~ which defines the type of the command.

** <<PingCommand>>Ping
*** Description
Ping/keep-alive command. Gives a [[PongResponse][~Pong~]] response.

*** Structure
- ~command~: ~string~ = ~"ping"~
- ~ping~: ~float~ = a timestamp to measure ping

** <<CreateCommand>>Create
*** Description
A command to create a new atomic process. 

*** Structure
- ~command~: ~string~ = ~"create"~
- ~name~: ~string~ = the name of the process to be created
- ~inputs~: ~array~ of [[linprop][~linprop~]] = a list of inputs. Their channels will be created by the prover.
- ~output~: [[linprop][~linprop~]] = the process output. The channcel will be created by the prover.

** <<Compose1Command>>Binary compose (compose1)
*** Description
Binary composition of 2 processes with a single action. 

Although a more general [[ComposeCommand][composition command]] is provided, when it comes to simple binary compositions this command executes faster.

*** Structure
- ~command~: ~string~ = ~"compose1"~
- ~action~: ~action~ = the composition action to be performed. The labels of the 2 arguments must match the labels of the processes provided in the next fields.
- ~lhs~: [[Process][~process~]] = the process corresponding to the first (left) argument of the action
- ~rhs~: [[Process][~process~]] = the process corresponding to the second (right) argument of the action
- ~state~: [[actionstate][~actionstate~]] = the initial action state. A unique label and counter of 0 are expected. A ~JOIN~ action also requires appropriate input and output provenance for the right and left arguments respectively.

** <<ComposeCommand>>Compose
*** Description
Construction of a complex composition with one or more actions. Although more general than the binary composition command [[Compose1Command][~compose1~]], it is slower.

*** Structure
- ~command~: ~string~ = ~"compose"~
- ~components~: ~array~ of [[Process][~process~]] = the list of all component processes that will be used
- ~actions~: ~array~ of [[action][~action~]] = the ordered list of actions to be performed
- ~state~: [[actionstate][~actionstate~]] = the initial action state. A unique label and counter of 0 are expected. [TODO: What provenance info do we need here?]

** <<VerifyCommand>>Verify
*** Description
A command used to reconstruct a process composition. 

This is legacy command which has now devolved into the [[ComposeCommand][~compose~]] command. The only difference is that ~verify~ does not produce [[ComposeResponse][~compose~]] responses for intermediate steps. It will only generate one [[VerifyResponse][~verify~]] response for the final process.

*** Structure
- ~command~: ~string~ = ~"verify"~
- ~components~: ~array~ of [[Process][~process~]] = the list of all component processes that will be used
- ~actions~: ~array~ of [[action][~action~]] = the ordered list of actions to be performed
- ~state~: [[actionstate][~actionstate~]] = the initial action state. A unique label and counter of 0 are expected. [TODO: What provenance info do we need here?]


* Responses
All responses include a ~response~ field of type ~string~ which defines the type of the response.

** <<PongResponse>>Pong 
*** Description
The response to the [[PingCommand][~Ping~]] command.

*** Structure
- ~response~: ~string~ = ~"Pong"~
- ~ping~: ~float~ = contains the original timestamp received by the prover in the [[PingCommand][~Ping~]] command.

** Create
*** Description
The response to the [[CreateCommand][~create~]] command with a definition of a new atomic process.

*** Structure
- ~response~: ~string~ = ~"CreateProcess"~
- ~process~: [[Process][~process~]] = the newly created process

** <<ComposeResponse>>Compose
*** Description
The result of a single binary composition action. The [[ComposeCommand][~compose~]] command may produce multiple of these, one for each action.

*** Structure
- ~response~: ~string~ = ~"Compose"~
- ~action~: [[action][~action~]] = the composition action that was applied
- ~process~: [[Process][~process~]] = the resulting composite process
- ~state~: [[actionstate][~actionstate~]] = the updated action state with the associated metadata

** <<VerifyResponse>>Verify
*** Description
The response of the [[VerifyCommand][~verify~]] command with a reconstructed composite process.

*** Structure
- ~response~: ~string~ = ~"Verify"~
- ~process~: [[Process][~process~]] = the reconstructed composition

** Failed
*** Description
This response is generated whenever the prover fails to perform a command. Unless there is a bug or associated limitation in the prover, this indicates a user or input error.

*** Structure
- ~response~: ~string~ = ~"CommandFailed"~
- ~content~: ~string~ = a (sometimes useful) description of the error that occured

** Exception
*** Description
This response is generated whenever the prover fails due to an internal exception. This indicates an expected failure in the system.

*** Structure
- ~response~: ~string~ = ~"Exception"~
- ~content~: ~string~ = the contents of the thrown exception
