<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Elements on WorkflowFM Reasoner</title><link>http://docs.workflowfm.com/workflowfm-reasoner/docs/elements/</link><description>Recent content in Elements on WorkflowFM Reasoner</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 14 Jun 2021 23:25:41 +0100</lastBuildDate><atom:link href="http://docs.workflowfm.com/workflowfm-reasoner/docs/elements/index.xml" rel="self" type="application/rss+xml"/><item><title>Resources</title><link>http://docs.workflowfm.com/workflowfm-reasoner/docs/elements/resources/</link><pubDate>Mon, 14 Jun 2021 23:25:43 +0100</pubDate><guid>http://docs.workflowfm.com/workflowfm-reasoner/docs/elements/resources/</guid><description>Processes are specified based on their input and output resources. Each resource is specified by its type and a π-calculus channel that receives or sends it.
Resource types Resource types are specified by a proposition in linear logic. In HOL Light these are propositions of type `:LinProp`.
Resource type names need to follow the same naming restrictions as HOL Light variables, i.e. they need to start with a letter and contain only letters and numbers.</description></item><item><title>Processes</title><link>http://docs.workflowfm.com/workflowfm-reasoner/docs/elements/processes/</link><pubDate>Mon, 14 Jun 2021 23:25:44 +0100</pubDate><guid>http://docs.workflowfm.com/workflowfm-reasoner/docs/elements/processes/</guid><description>Processes are defined based on their input and outputs resources, as well as some additional metadata.
The full process data structure is the following:
1module type Process_type = 2sig 3 type t = { 4 name : string; 5 inputs : (term * term) list; 6 output : term * term; 7 prov : provtree; 8 proc : term; 9 actions : Action.t list; 10 copier : bool; 11 intermediate : bool; 12 } 13(* .</description></item><item><title>Composition</title><link>http://docs.workflowfm.com/workflowfm-reasoner/docs/elements/composition/</link><pubDate>Mon, 14 Jun 2021 23:25:46 +0100</pubDate><guid>http://docs.workflowfm.com/workflowfm-reasoner/docs/elements/composition/</guid><description>Composition is achieved through binary actions that compose 2 processes together. Although there is some high level user control over the actions, the composition is automated and strictly follows the rules of linear logic.
The result is an intermediate composite process specified by its input and output resources and a correct-by-construction, executable π-calculus definition. These processes can then be further composed using subsequent actions.
Performing an action involved the production and maintenance of a temporary internal state called an actionstate.</description></item><item><title>Provenance</title><link>http://docs.workflowfm.com/workflowfm-reasoner/docs/elements/provenance/</link><pubDate>Mon, 14 Jun 2021 23:25:47 +0100</pubDate><guid>http://docs.workflowfm.com/workflowfm-reasoner/docs/elements/provenance/</guid><description>When composing processes, it is often necessary to keep track of which component processes own the inputs and outputs (or rather the different parts of the single output) of a composite process. We call this information provenance.
For example, provenance can provide essential metadata to be able to correctly visualize a composite process diagrammatically.
Example We begin with a motivating example to explain the purpose that provenance fulfils for the visualization of resource-based composition.</description></item></channel></rss>