#+TITLE: JSON
#+AUTHOR: Petros Papapanagiotou
#+EMAIL: petros@workflowfm.com
#+OPTIONS: toc:nil email:t 
#+EXCLUDE_TAGS: noexport
#+PROPERTY: header-args :results output drawer :session workflowfm :exports both :eval no-export :dir ../../
#+HUGO_AUTO_SET_LASTMOD: t

#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: docs/json

* JSON API
  :PROPERTIES:
  :EXPORT_FILE_NAME: _index
  :EXPORT_HUGO_WEIGHT: 400
  :END:

The second mode of the WorkflowFM Reasoner exposes a [[https://en.wikipedia.org/wiki/JSON][JSON]] API that can enable interaction with external and web based systems. 

The JSON API mode can be loaded using the following command:
#+BEGIN_SRC ocaml :eval no
loads (!hol_dir ^ "/workflowfm/make.ml");;
#+END_SRC 

The rest of this section describes the main types involved in the JSON schema, as well as the format for providing commands and the responses the reasoner can generate.

* Main Types
  :PROPERTIES:
  :EXPORT_FILE_NAME: types
  :EXPORT_HUGO_WEIGHT: 410
  :END:
** Linear Propositions 
   :PROPERTIES:
   :CUSTOM_ID: linprop
   :END:

~linprop~

**** Description:

 [[../../elements/resources][Linear terms]] are either:
 1. atoms
 2. subterms connected by tensor or plus 
 3. negations of terms

**** Structure:
 - ~type~: ~string~ = ~"var" | "neg" | "times" | "plus"~
 - ~name~: ~string~ = the name of the atom if ~type = "var"~, otherwise ignored
 - ~args~: ~array~ of [[#linprop][~linprop~]] = the list of arguments if ~type~ is ~neg~, ~times~ or ~plus~, otherwise ignored. Binary operators ~times~ and ~plus~ can have more than 2 arguments, in which case they are applied in a right associative way

** Annotated terms 
   :PROPERTIES:
   :CUSTOM_ID: linterm
   :END:

~linterm~

**** Description:

 Annotated terms are linear propositional terms annotated with a channel.

**** Structure:
 - ~cll~: [[#linprop][~linprop~]]
 - ~channel~: ~string~

** Composition actions 
   :PROPERTIES:
   :CUSTOM_ID: action
   :END:
~action~

**** Description:

 [[../../elements/composition/#actions][Composition actions]] describe a binary combination of 2 labelled processes. 

**** Structure:
 - ~act~: ~string~ = the type of composition, currently ~"JOIN" | "TENSOR" | "WITH"~ for sequential, parallel, and conditional composition respectively
 - ~larg~: ~string~ = the name of the first (or "left") component process
 - ~lsel~: ~string~ = a string describing some relevant part of the left process component. This is different depending on the action type.
 - ~rarg~: ~string~ = the name of the second (or "right") component process
 - ~rsel~: ~string~ = a string describing some relevant part of the right process component. This is different depending on the action type.
 - ~res~: ~string~ = the desired label for the resulting composition


** Provenance 
   :PROPERTIES:
   :CUSTOM_ID: prov
   :END:

~prov~

**** Description:

 [[../../elements/provenance][Provenance trees]] are used to determine the origin of each linear proposition in an input or output term. 

**** Structure:
 + ~type~: ~string~ = ~"source" | "times" | "plus"~
 + ~name~: ~string~ = the provenance label if ~type = "source"~, otherwise ignored
 + ~args~: ~array~ of [[#prov][~prov~]] = the list of arguments if ~type~ is  ~times~ or ~plus~, otherwise ignored. Binary operators ~times~ and ~plus~ can have more than 2 arguments, in which case they are applied in a right associative way

** Provenance entries 
   :PROPERTIES:
   :CUSTOM_ID: proventry
   :END:
~prov_entry~ and ~iprov_entry~

**** Description:

[[../../elements/provenance][Provenance info]] is kept in the [[../../elements/composition/#actionstate][actionstate]]. Provenance entries associate a provenance tree to the output (~prov_entry~) or input (~iprov_entry~) it corresponds to. Output provenance is associated with a process label whose output it describes. Input provenance is associated with an available input term.

**** Structure:
 ~prov_entry~:
 - ~name~: ~string~ = the name/label of the process whose output we are describing
 - ~prov~: [[#prov][~prov~]] = the corresponding provenance tree

 ~iprov_entry~:
 - ~term~: [[#linprop][~linprop~]] = the (non-negated) linear term of the input we are describing
 - ~prov~: [[#prov][~prov~]] = the corresponding provenance tree

** Actionstate 
   :PROPERTIES:
   :CUSTOM_ID: actionstate
   :END:

~actionstate~

**** Description:

 The [[../../elements/composition/#actionstate][actionstate]] is used to convey state info to the prover and retrieve proof metadata afterwards.

**** Structure:
 - ~label~: ~string~ = a unique label identifying the composite process under contruction
 - ~ctr~: ~int~ = a non-negative counter used to keep variables fresh. Expected to be initialized to ~0~.
 - ~buffered~: ~array~ of [[#linprop][~linprop~]] = the types of buffers that were constructed during proof. This used to be the way to determine buffered edges in the frontend, but is now obsolete thanks to the provenance trees.
 - ~joined~: ~array~ of [[#linterm][~linterm~]] = the inputs that were used up/connected during a ~JOIN~ action.
 - ~iprov~: ~array~ of [[#proventry][~iprov_entry~]] = input povenance entries
 - ~prov~: ~array~ of [[#proventry][~prov_entry~]] = output provenance entries

** Agent  
   :PROPERTIES:
   :CUSTOM_ID: agent
   :END:

~agent~

 An agent refers to a \pi-calculus definition corresponding to a process specification. Currently this is just a string, but we have plans to adopt a more structured representation in the near future.

** Process 
   :PROPERTIES:
   :CUSTOM_ID: process
   :END:

~process~

**** Description:

 The complete specification of a [[../../elements/processes][process]]. 

**** Structure:

 - ~name~: ~string~ = a name/label for the process
 - ~inputs~: ~array~ of [[#linterm][~linterm~]] 
 - ~output~: [[#linterm][~linterm~]]
 - ~prov~: [[#prov][~prov~]] = the output provenance
 - ~proc~: [[#agent][~agent~]] = the pi-calculus specification
 - ~actions~: ~array~ of [[#action][~action~]] = a list of composition actions that construct this process. Empty if the process is atomic.
 - ~copier~: ~bool~ = true if the prover determines this to be a [[../../elements/processes/#copynodes][copy node]]
 - ~intermediate~: ~bool~ = true if this is an [[../../elements/processes/#intermediate][intermediate composition step]] (as opposed to an atomic process or completed composition)


* Commands
  :PROPERTIES:
  :EXPORT_FILE_NAME: commands
  :EXPORT_HUGO_WEIGHT: 420
  :END:

JSON commands can be issued to the WorkflowFM Reasoner using the following function:
#+BEGIN_SRC ocaml :eval no
Json_composer_io.execute "JSON";;
#+END_SRC 

Replace ~JSON~ with one of the commands described below, in JSON format.

You can also execute a JSON command stored in a file as follows:
#+BEGIN_SRC ocaml :eval no
Json_composer_io.execute_file "path/to/file.json";;
#+END_SRC 


{{< tip >}}
All commands include a ~command~ field of type ~string~ which defines the type of the command.
{{< /tip >}}

** Ping
   :PROPERTIES:
   :CUSTOM_ID: PingCommand
   :END:

**** Description:

 Ping/keep-alive command. Gives a [[#PongResponse][~Pong~]] response.

**** Structure:
 - ~command~: ~string~ = ~"ping"~
 - ~ping~: ~float~ = a timestamp to measure ping

** Create
   :PROPERTIES:
   :CUSTOM_ID: CreateCommand
   :END:

**** Description:

 A command to create a new atomic process. 

**** Structure:
 - ~command~: ~string~ = ~"create"~
 - ~name~: ~string~ = the name of the process to be created
 - ~inputs~: ~array~ of [[#linprop][~linprop~]] = a list of inputs. Their channels will be created by the prover.
 - ~output~: [[#linprop][~linprop~]] = the process output. The channcel will be created by the prover.

** Binary compose (compose1)
   :PROPERTIES:
   :CUSTOM_ID: Compose1Command
   :END:
**** Description:

 Binary composition of 2 processes with a single action. 

 Although a more general [[#ComposeCommand][composition command]] is provided, when it comes to simple binary compositions this command executes faster.

**** Structure:
 - ~command~: ~string~ = ~"compose1"~
 - ~action~: [[#action][~action~]] = the composition action to be performed. The labels of the 2 arguments must match the labels of the processes provided in the next fields.
 - ~lhs~: [[#process][~process~]] = the process corresponding to the first (left) argument of the action
 - ~rhs~: [[#process][~process~]] = the process corresponding to the second (right) argument of the action

** Compose
   :PROPERTIES:
   :CUSTOM_ID: ComposeCommand
   :END:

**** Description:

 Construction of a complex composition with one or more actions. Although more general than the binary composition command [[#Compose1Command][~compose1~]], it is slower.

**** Structure:
 - ~command~: ~string~ = ~"compose"~
 - ~name~: ~string~ = the name of the final composition
 - ~components~: ~array~ of [[#process][~process~]] = the list of all component processes that will be used
 - ~actions~: ~array~ of [[#action][~action~]] = the ordered list of actions to be performed

** Verify
   :PROPERTIES:
   :CUSTOM_ID: VerifyCommand
   :END:
**** Description:

 A command used to reconstruct a process composition. 

 This is legacy command which has now devolved into the [[#ComposeCommand][~compose~]] command. The only difference is that ~verify~ does not produce [[#ComposeResponse][~compose~]] responses for intermediate steps. It will only generate one [[#VerifyResponse][~verify~]] response for the final process.

**** Structure:
 - ~command~: ~string~ = ~"verify"~
 - ~name~: ~string~ = the name of the final composition
 - ~components~: ~array~ of [[#process][~process~]] = the list of all component processes that will be used
 - ~actions~: ~array~ of [[#action][~action~]] = the ordered list of actions to be performed

** Deploy
   :PROPERTIES:
   :CUSTOM_ID: DeployCommand
   :END:
**** Description:

 This is a family of commands that produce executable process deployments.

 There are currently 3 types of possible deployments:
 1. ~PiViz~: This produces a file for the PiVizTool and/or MWB.
 2. ~PiLib~: This produces a deployment and code templates using the old PiLib library.
 3. ~PEW~: This produces a deployment and code templates with the newer [[https://github.com/workflowfm/pew][PEW library]].

**** Structure:

**** ~PiViz~
 - ~command~: ~string~ = ~"piviz"~
 - ~process~: [[#process][~process~]] = the process to be deployed
 - ~components~: ~array~ of [[#process][~process~]] = the list of all dependencies/components required in the composition

**** ~PiLib~
 - ~command~: ~string~ = ~"pilib"~
 - ~process~: [[#process][~process~]] = the process to be deployed
 - ~components~: ~array~ of [[#process][~process~]] = the list of all dependencies/components required in the composition
 - ~separator~: ~string~ = the client OS-specific file path separator 
 - ~path~: ~string~ = the base path for the deployment
 - ~pkg~: ~string~ = the desired name for the Scala package that will contain the code
 - ~project~: ~string~ = an identifiable name for the deployment. This will be used to identify certain types and classes.
 - ~main~: ~bool~ = ~true~ if the generation of a template for a main class is required.
- ~java~: ~bool~ = ~true~ if the generation of a java runner class is required. This can help integrate the Scala deployment with Java code.
  
**** ~PEW~
 - ~command~: ~string~ = ~"piviz"~
 - ~process~: [[#process][~process~]] = the process to be deployed
 - ~components~: ~array~ of [[#process][~process~]] = the list of all dependencies/components required in the composition
 - ~separator~: ~string~ = the client OS-specific file path separator 
 - ~path~: ~string~ = the base path for the deployment
 - ~pkg~: ~string~ = the desired name for the Scala package that will contain the code
 - ~project~: ~string~ = an identifiable name for the deployment. This will be used to identify certain types and classes.
 - ~main~: ~bool~ = ~true~ if the generation of a template for a main class is required.
- ~java~: ~bool~ = ~true~ if the generation of a java runner class is required. This can help integrate the Scala deployment with Java code.

* Responses
  :PROPERTIES:
  :EXPORT_FILE_NAME: responses
  :EXPORT_HUGO_WEIGHT: 430
  :END:

JSON responses are provided in standard output, wrapped between a line containing the string ~JSON_START~ and a line containing the string ~JSON_END~. HOL Light will also yield additional output outside those 2 lines.

You can therefore parse JSON output using a regular expression of the form ~"JSON_START(.*?)JSON_END"~.

{{< tip >}}
All responses include a ~response~ field of type ~string~ which defines the type of the response.
{{< /tip >}}

** Pong 
   :PROPERTIES:
   :CUSTOM_ID: PongResponse
   :END:
**** Description:

 The response to the [[#PingCommand][~Ping~]] command.

**** Structure:
 - ~response~: ~string~ = ~"Pong"~
 - ~ping~: ~float~ = contains the original timestamp received by the prover in the [[#PingCommand][~Ping~]] command.

** Create
**** Description:

 The response to the [[#CreateCommand][~create~]] command with a definition of a new atomic process.

**** Structure:
 - ~response~: ~string~ = ~"CreateProcess"~
 - ~process~: [[#process][~process~]] = the newly created process

** Compose
   :PROPERTIES:
   :CUSTOM_ID: ComposeResponse
   :END:

**** Description:

 The result of a single binary composition action. The [[#ComposeCommand][~compose~]] command may produce multiple of these, one for each action.

**** Structure:
 - ~response~: ~string~ = ~"Compose"~
 - ~action~: [[#action][~action~]] = the composition action that was applied
 - ~process~: [[#process][~process~]] = the resulting composite process
 - ~state~: [[#actionstate][~actionstate~]] = the updated action state with the associated metadata

** Verify
   :PROPERTIES:
   :CUSTOM_ID: VerifyResponse
   :END:

**** Description:

 The response of the [[#VerifyCommand][~verify~]] command with a reconstructed composite process.

**** Structure:
 - ~response~: ~string~ = ~"Verify"~
 - ~process~: [[#process][~process~]] = the reconstructed composition

** Deploy
   :PROPERTIES:
   :CUSTOM_ID: #DeployResponse
   :END:

**** Description:

 This is the response to the [[#DeployCommand][~deploy~]] commands. It describes the files that are required for deployment. 

**** Structure:

 First we need the structure for a single deployment file. This is a ~file~ object containing the following fields:

 - ~path~: ~string~ = the full path of the file (including its name) in the deployment
 - ~content~: ~string~ = the content of the file
 - ~overwrite~: ~bool~ = the reasoner tags the files that are generated fully automatically so that they will be overwritten in consecutive deployments. Files that may be edited by the user (e.g. code templates) have this field marked as ~false~ to avoid overwritting user content.

 Based on this, the ~deploy~ response is as follows:
 - ~response~: ~string~ = ~"Deploy"~
 - ~type~: ~string~ = the type of deployment. Currently one of ~PiViz~, ~PiLib~ or ~PEW~.
 - ~deployment~: ~Array~ of ~file~ = a list of deployment files.

** Failed
**** Description:

 This response is generated whenever the prover fails to perform a command. Unless there is a bug or associated limitation in the prover, this indicates a user or input error.

**** Structure:
 - ~response~: ~string~ = ~"CommandFailed"~
 - ~content~: ~string~ = a (sometimes useful) description of the error that occured

** Exception
**** Description:

 This response is generated whenever the prover fails due to an internal exception. This indicates an expected failure in the system.

**** Structure:
 - ~response~: ~string~ = ~"Exception"~
 - ~content~: ~string~ = the contents of the thrown exception

   
